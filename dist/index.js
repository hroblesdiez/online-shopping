/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/main.js":
/*!***************************!*\
  !*** ./assets/js/main.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/main.css */ \"./assets/css/main.css\");\n //contentful\n\nconst client = contentful.createClient({\n  space: 'jwwnuvyk0gqo',\n  accessToken: 'i-_6NheUDolHljkdCDKY3qEgdyIFw9oPMiZlXCSJgU4'\n}); //variables\n\nconst cartBtn = document.querySelector('#cartBtn');\nconst closeCartBtn = document.querySelector('#closeCartBtn');\nconst clearCartBtn = document.querySelector('#clearCartBtn');\nconst cartOverlay = document.querySelector('#cartOverlay');\nconst cartContainer = document.querySelector('#cartContainer');\nconst cartContent = document.querySelector('#cartContent');\nconst cartItems = document.querySelector('#cartItems');\nconst cartTotal = document.querySelector('#cartTotal');\nconst recommendationsContainer = document.querySelector('#recommendations');\nconst categoriesContainer = document.querySelector('#categories');\nconst shopNowBtn = document.querySelector('#shop');\nconst categorylinks = document.querySelector('#categorylinks');\nconst sidebarToggle = document.querySelector('#sidebarToggle');\nconst sidebar = document.querySelector('#sidebar');\nconst closeSidebar = document.querySelector('#closeSidebar');\nconst navBar = document.querySelector('#navBar');\nconst spinner = document.querySelector('#spinner');\nconst date = document.querySelector('#year'); //products added to cart\n\nlet cart = [];\nlet buttonsDOM = []; //get products\n\nclass Products {\n  async getProducts() {\n    let contentful = await client.getEntries({\n      content_type: 'product'\n    });\n    let products = contentful.items; //destructuring each product\n\n    products = products.map(product => {\n      const {\n        title,\n        price,\n        category\n      } = product.fields;\n      const {\n        id\n      } = product.sys;\n      const image = product.fields.image.fields.file.url;\n      return {\n        title,\n        price,\n        id,\n        image,\n        category\n      };\n    });\n    return products;\n  }\n\n} //display products\n\n\nclass DisplayProducts {\n  displayProducts(products) {\n    let recommendations = '';\n    let recommendationsArray = [...products];\n    let ourRecommendations = [];\n    let categoriesRecommendations = []; //I wanna recommend products between 95 and 200 € (maximum 1 product per category)\n\n    for (let i = 0; i < recommendationsArray.length; i++) {\n      if (recommendationsArray[i].price < 200 && !categoriesRecommendations.includes(recommendationsArray[i].category)) {\n        categoriesRecommendations.push(recommendationsArray[i].category);\n        ourRecommendations.push(recommendationsArray[i]);\n      }\n    }\n\n    ;\n    ourRecommendations.forEach(item => recommendations += this.displayProduct(item));\n    recommendationsContainer.innerHTML = recommendations;\n  }\n\n  displayProduct(product) {\n    let result = `<article class=\"flex flex-col px-4 py-4 basis-full md:basis-1/2 lg:basis-1/3 xl:basis-1/4\">\n      <div class=\"group w-full relative overflow-hidden h-[250px]\">\n        <img src=\"${product.image}\" alt=\"${product.title}\" class=\"w-full h-full group-hover:opacity-60 object-cover\">\n        <button class=\"bg-primary py-3 px-6 text-base font-bold uppercase border-none cursor-pointer translate-x-[101%] transition-all duration-300 ease-linear group-hover:translate-x-0 absolute right-0 top-[70%] hover:text-white\" data-id=\"${product.id}\" id=\"addToCartButton\">\n          <i class=\"fas fa-shopping-cart text-base mr-4\"></i>add to cart\n        </button>\n      </div>\n      <div class=\"text-center\">\n        <h3 class=\"font-montserrat font-semibold text-base md:text-lg text-title uppercase mt-6\">${product.title}</h3>\n        <span class=\"text-base font-semibold text-primary\">${product.price}€</span>\n      </div>\n    </article>`;\n    return result;\n  }\n\n  displayCategories() {\n    let categories = Storage.getCategories();\n    let result = '';\n    categories.forEach(category => result += this.displayCategory(category));\n    categoriesContainer.innerHTML = result;\n    shopNowBtn.addEventListener(\"click\", () => {\n      let title = recommendationsContainer.previousElementSibling;\n      let navBarHeight = navBar.getBoundingClientRect().height;\n      window.scrollTo(0, title.offsetTop - navBarHeight);\n    });\n  }\n\n  displayCategory(category) {\n    let productsByCategory = Storage.getProductsByCategory(category);\n    let displayProductsByCategory = '';\n    productsByCategory.forEach(product => displayProductsByCategory += this.displayProduct(product));\n    let result = `<section class=\"px-10 py-10\">\n                      <div class=\"w-full\">\n                        <h2 class=\"font-montserrat font-bold text-title text-2xl md:text-3xl text-left uppercase mb-12\">${category}</h2>\n                        <div class=\"flex flex-col md:flex-row flex-wrap justify-evenly\" id=${category.toLowerCase()}>` + displayProductsByCategory + `</div>\n                        </div>\n                      </section>`;\n    return result;\n  }\n\n  displaySideBar() {\n    let categories = Storage.getCategories();\n    let result = '';\n    categories.forEach(category => {\n      result += `<li class=\"mb-10 font-montserrat text-4xl text-title font-bold hover:text-primary\">\n      <a id=\"${category}\" class=\"uppercase cursor-pointer\">${category}</a>\n    </li>`;\n    });\n    categorylinks.innerHTML = result; //show or hide sidebar\n\n    sidebarToggle.addEventListener(\"click\", () => {\n      sidebar.classList.toggle('-translate-x-full');\n    });\n    closeSidebar.addEventListener(\"click\", () => {\n      if (!sidebar.classList.contains('-translate-x-full')) {\n        sidebar.classList.add('-translate-x-full');\n      } else {\n        sidebar.classList.remove('-translate-x-full');\n      }\n    }); //add eventlisteners to each category link in the sidebar\n\n    categorylinks.addEventListener(\"click\", e => {\n      let categories = Storage.getCategories();\n      categories.forEach(category => {\n        const container = document.getElementById(category.toLowerCase());\n        const title = container.previousElementSibling;\n\n        if (e.target.id === category) {\n          window.scrollTo(0, title.offsetTop - 125);\n        }\n\n        sidebar.classList.add('-translate-x-full');\n      });\n    });\n  } //get \"add to cart\" buttons\n\n\n  getAddToCartButtons() {\n    const addToCartButtons = [...document.querySelectorAll('#addToCartButton')];\n    buttonsDOM = addToCartButtons;\n    addToCartButtons.forEach(addToCartButton => {\n      let id = addToCartButton.dataset.id;\n      let inCart = cart.find(item => item.id === id);\n\n      if (inCart) {\n        addToCartButton.textContent = 'In cart';\n        addToCartButton.disabled = true;\n      }\n\n      addToCartButton.addEventListener(\"click\", e => {\n        e.target.innerText = \"In cart\";\n        e.target.disabled = true; //get product from products\n\n        let cartItem = { ...Storage.getProduct(id),\n          amount: 1\n        }; //add product to cart\n\n        cart = [...cart, cartItem]; //save cart in local storage\n\n        Storage.saveCart(cart); //set cart values\n\n        this.setCartValues(cart); // display cart item method\n\n        this.addCartItem(cartItem); //show the cart\n\n        this.showCart();\n      });\n    });\n  }\n\n  setCartValues(cart) {\n    let tempTotal = 0;\n    let itemsTotal = 0;\n    cart.map(item => {\n      tempTotal += item.price * item.amount;\n      itemsTotal += item.amount;\n    });\n    cartTotal.innerText = parseFloat(tempTotal.toFixed(2));\n    cartItems.innerText = itemsTotal;\n  }\n\n  addCartItem(item) {\n    const div = document.createElement('div');\n    div.classList.add('flex', 'justify-between', 'items-stretch', 'bg-white', 'mb-4');\n    div.innerHTML = `<img src=\"${item.image}\" alt=\"\" class=\"w-[80px] h-auto object-cover\">\n    <div class=\"flex flex-col justify-between flex-1 mx-6 py-3\">\n      <h4>${item.title}</h4>\n      <h5>${item.price}€</h5>\n      <span><i class=\"fas fa-trash cursor-pointer removeItem\" data-id=${item.id}></i></span>\n    </div>\n    <div class=\"flex flex-col justify-between mr-6 py-3 text-right\">\n      <span class=\"cursor-pointer addQuantity\" data-id=${item.id}>+</span>\n      <span>${item.amount}</span>\n      <span class=\"cursor-pointer removeQuantity\" data-id=${item.id}>-</span>\n    </div>`;\n    cartContent.appendChild(div);\n  }\n\n  showCart() {\n    cartOverlay.classList.remove('hidden');\n    cartContainer.classList.remove('translate-x-0');\n  }\n\n  showAmountCart() {\n    cart.length > 0 ? cartItems.classList.remove('hidden') : cartItems.classList.add('hidden');\n  }\n\n  hideCart() {\n    cartOverlay.classList.add('hidden');\n  }\n\n  clearCart() {\n    let cartItemsIds = cart.map(cartItem => cartItem.id); //get all the ids in the cart I want to remove\n\n    cartItemsIds.forEach(id => this.removeItem(id)); //remove items from the cart\n    //console.log(cartContent.children);\n\n    while (cartContent.children.length > 0) {\n      cartContent.removeChild(cartContent.children[0]); //remove items from the DOM\n    }\n\n    this.hideCart();\n    this.showAmountCart();\n  }\n\n  removeItem(id) {\n    cart = cart.filter(item => item.id !== id);\n    this.setCartValues(cart);\n    Storage.saveCart(cart);\n    let button = this.getSingleButton(id);\n    button.disabled = false;\n    button.innerHTML = `<i class=\"fas fa-shopping-cart text-base mr-4\"></i>add to cart`;\n  }\n\n  getSingleButton(id) {\n    return buttonsDOM.find(button => button.dataset.id === id);\n  }\n\n  cartLogic() {\n    //clear cart\n    clearCartBtn.addEventListener(\"click\", () => this.clearCart()); //Listen to event in cart items (remove, add amount, remove amount)\n\n    cartContent.addEventListener(\"click\", e => {\n      if (e.target.classList.contains('removeItem')) {\n        let removeItem = e.target;\n        let id = removeItem.dataset.id;\n        cartContent.removeChild(removeItem.parentElement.parentElement.parentElement); // remove item from the DOM\n\n        this.removeItem(id); //remove the item from the cart\n\n        this.showAmountCart();\n      } else if (e.target.classList.contains('addQuantity')) {\n        let addAmount = e.target;\n        let id = addAmount.dataset.id;\n        let tempItem = cart.find(item => item.id === id);\n        tempItem.amount += 1;\n        Storage.saveCart(cart);\n        this.setCartValues(cart);\n        addAmount.nextElementSibling.innerText = tempItem.amount;\n      } else if (e.target.classList.contains('removeQuantity')) {\n        let substractAmount = e.target;\n        let id = substractAmount.dataset.id;\n        let tempItem = cart.find(item => item.id === id);\n        tempItem.amount -= 1;\n\n        if (tempItem.amount > 0) {\n          Storage.saveCart(cart);\n          this.setCartValues(cart);\n          substractAmount.previousElementSibling.innerText = tempItem.amount;\n        } else {\n          cartContent.removeChild(substractAmount.parentElement.parentElement);\n          this.removeItem(id);\n        }\n      }\n    });\n  }\n\n  setupApp() {\n    cart = Storage.getCart();\n    this.showAmountCart();\n    this.setCartValues(cart);\n    this.populate(cart);\n    cartBtn.addEventListener(\"click\", this.showCart);\n    closeCartBtn.addEventListener(\"click\", this.hideCart);\n    window.addEventListener(\"click\", e => {\n      if (e.target.id === 'cartOverlay') {\n        this.hideCart(); //hide cart when cart is open and user clicks outside the cart at any point of the screen\n\n        this.showAmountCart();\n      }\n    });\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        navBar.classList.add('bg-white');\n      } else {\n        navBar.classList.remove('bg-white');\n      }\n    });\n    let year = new Date().getFullYear();\n    let month = new Date().getMonth();\n    date.innerHTML = month + year;\n  }\n\n  populate(cart) {\n    cart.forEach(item => this.addCartItem(item));\n  }\n\n} //Local Storage\n\n\nclass Storage {\n  static saveProducts(products) {\n    localStorage.setItem(\"products\", JSON.stringify(products));\n  }\n\n  static getProduct(id) {\n    let products = JSON.parse(localStorage.getItem(\"products\")); //we retrieve the products array that it is in Local Storage\n\n    return products.find(product => product.id === id);\n  }\n\n  static getCategories() {\n    let categories = JSON.parse(localStorage.getItem(\"products\"));\n    let result = [];\n\n    for (let i = 0; i < categories.length; i++) {\n      if (!result.includes(categories[i].category)) {\n        result.push(categories[i].category);\n      }\n    }\n\n    return result;\n  }\n\n  static getProductsByCategory(category) {\n    let products = JSON.parse(localStorage.getItem(\"products\")); //we retrieve the products array that it is in Local Storage\n\n    return products.filter(product => product.category === category);\n  }\n\n  static saveCart(cart) {\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n\n  static getCart() {\n    return localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : [];\n  }\n\n} //Spinner\n\n\nwindow.addEventListener(\"load\", () => {\n  spinner.classList.add(\"hidden\"); //hide the spinner when window is loaded\n\n  spinner.addEventListener(\"transitionend\", () => {\n    document.body.removeChild(\"spinner\"); //remove the spinner from the DOM when transition is ended\n  });\n}); //Initialitazion\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const display = new DisplayProducts();\n  const products = new Products(); //setup app\n\n  display.setupApp();\n  products.getProducts().then(products => {\n    display.displayProducts(products);\n    Storage.saveProducts(products);\n    display.displayCategories();\n    display.displaySideBar();\n  }).then(() => {\n    display.getAddToCartButtons();\n    display.cartLogic();\n  });\n});\n\n//# sourceURL=webpack://real-state/./assets/js/main.js?");

/***/ }),

/***/ "./assets/css/main.css":
/*!*****************************!*\
  !*** ./assets/css/main.css ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://real-state/./assets/css/main.css?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./assets/js/main.js");
/******/ 	
/******/ })()
;